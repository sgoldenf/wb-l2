package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
	Фасад - структурный паттерн проектирования, который позволяет скрыть сложность системы с помощью предоставления упрощённого интерфейса для взаимодействия с ней.

	Применимость:
	- Сложная система из различных структур: фасад объединяет их в себе и предоставляет пользователю методы взаимодействия
	- Уменьшение зависимостей между пользователем и сложной системой:
		Пользователю предоставлены конкретные методы пользования системой, что позволяет вносить изменения в саму систему незаметно для пользователя
	- Разложение системы на отдельные слои, упрощение взаимодествия между ними и повышение их независимости друг от друга

	Плюсы и минусы:
	+ Пользователь изолирован от сложной системы, получает простой и удобный в использовании интерфейс
	- Фасад рискует стать "божественным объектом" (объект, делающий слишком много, нарушение single responsibility), привязанным ко всем структурам в программе

	Примеры использования на практике:
	Используется в библиотеках и позволяет описать их так, чтобы пользователю не нужно было вникать в их реализацию.
*/

type root struct{}

func (r *root) grow() {
	fmt.Println("Root grows down")
}

type stem struct{}

func (s *stem) grow() {
	fmt.Println("Stem grows up")
}

// PlantFacade - фасад, объединяющий в себе работу подсистем root и stem.
type PlantFacade struct {
	r *root
	s *stem
}

// NewPlantFacade создает новый объект типа plantFacade и возвращает указатель на него.
func NewPlantFacade() *PlantFacade {
	return &PlantFacade{
		r: &root{},
		s: &stem{},
	}
}

// GrowPlant вызывает методы подсистем.
func (f *PlantFacade) GrowPlant() {
	f.r.grow()
	f.s.grow()
}
