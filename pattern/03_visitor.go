package pattern

import "fmt"

/*
	Реализовать паттерн «посетитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Visitor_pattern
*/

/*
	Посетитель - паттерн поведения, позволяющий определить операцию для объектов других классов без их изменения

	Применимость:
	- Много объектов с разными интерфейсами, требуется выполнить над ними ряд операций
	- Необходимо добавить одинаковый набор операций без изменения интерфейса
	- Часто добавляются новые операции, при этом структуры стабильны и редко меняются

	Плюсы и минусы:
	+ Упрощает добавление операций, работающих со сложными структурами объектов
	+ Объединение родственных операций в одном классе
	- Не оправдан, если иерархия элементов часто меняется
	- Может привести к нарушению инкапсуляции

	Примеры использования на практике:
	Например, когда нужно вывести информацию о сумме за позиции разных категорий в заказе.
*/

// Item объявляет метод Accept, принимающий посетителя в аргументе.
type Item interface {
	Accept(Visitor)
}

// Bread - конкретный элемент для товаров категории хлеб.
type Bread struct {
	Name  string
	Price float64
	Count int
}

// Accept принимает посетителя для Bread.
func (b *Bread) Accept(v Visitor) {
	v.VisitBread(b)
}

// Fruit - конкретный элемент для товаров категории фрукты.
type Fruit struct {
	Name   string
	Price  float64
	Weight float64
}

// Accept принимает посетителя для Fruit.
func (f *Fruit) Accept(v Visitor) {
	v.VisitFruit(f)
}

// Visitor объявляет операцию визита для каждого конкретного элемена.
type Visitor interface {
	VisitBread(*Bread)
	VisitFruit(*Fruit)
}

// ItemInfoVisitor - конкретный посетитель, предоставляющий информацию о стоимости товара в корзине.
type ItemInfoVisitor struct{}

// VisitBread выводит название позиции и ее стоимость (цена за одну позицию * количество позиций).
func (iv *ItemInfoVisitor) VisitBread(b *Bread) {
	fmt.Println(b.Name, "-", b.Price*float64(b.Count))
}

// VisitFruit выводит название позиции и ее стоимость (цена за кг * вес).
func (iv *ItemInfoVisitor) VisitFruit(f *Fruit) {
	fmt.Println(f.Name, "-", f.Price*f.Weight)
}
