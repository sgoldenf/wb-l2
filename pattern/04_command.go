package pattern

import "fmt"

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
*/

/*
	Команда — поведенческий паттерн проектирования, который превращает запросы в объекты.
	Он позволяет передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.

	Применимость:
	- Когда необходимо параметризовать объекты выполняемым действием
	- Когда необходимо ставить операции в очередь, выполнять их по расписанию или передавать по сети
	- Когда нужна операция отмены

	Плюсы и минусы:
	+ Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют
	+ Позволяет реализовать простую отмену и повтор операций
	+ Позволяет реализовать отложенный запуск операций
	+ Позволяет собирать сложные команды из простых
	+ Реализует принцип открытости/закрытости
	- Усложняет код программы из-за введения множества дополнительных классов

	Примеры использования на практике:
	Действия в приложении с пользовательским интерфейсом, вызываемые нажатием на кнопку/шорткатом
*/

// Calculator располагает информацией о способах выполнения операций.
type Calculator struct{}

// Calculate получает результат выражения.
func (c *Calculator) Calculate() {
	fmt.Println("Calculate result")
}

// Clear очищает ввод.
func (c *Calculator) Clear() {
	fmt.Println("Clear input")
}

// Command - интерфейс для выполнения операций.
type Command interface {
	execute()
}

// Button - инициатор, обращающийся к команде для выполнения запроса.
type Button struct {
	command Command
}

// Press выполняет команду.
func (b *Button) Press() {
	b.command.execute()
}

// CalculateCommand  - конкретная команда для подсчета выражения.
type CalculateCommand struct {
	calculator *Calculator
}

func (c *CalculateCommand) execute() {
	c.calculator.Calculate()
}

// ClearCommand - конкретная команда для очистки ввода.
type ClearCommand struct {
	calculator *Calculator
}

func (c *ClearCommand) execute() {
	c.calculator.Clear()
}
