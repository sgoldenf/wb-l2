package pattern

import "fmt"

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
	Стратегия —  поведенческий шаблон проектирования, предназначенный для определения семейства алгоритмов, инкапсуляции каждого из них и обеспечения их взаимозаменяемости.

	Применимость:
	- Когда нужно использовать разные вариации какого-то алгоритма внутри одного объекта
	- Когда есть множество похожих классов, отличающихся только некоторым поведением
	- Когда нужно скрыть детали реализации алгоритмов от других классов
	- Когда различные вариации алгоритмов реализованы в виде развесистого условного оператора. Каждая ветка такого оператора представляет собой вариацию алгоритма

	Плюсы и минусы:
	+ Легкая замена алгоритмов
	+ Изоляция кода и данных алгоритмов от других классов
	+ Уход от наследования к делегированию
	+ Реализует принцип открытости/закрытости
	- Усложняет программу за счет доп. классов
	- Клиент должен знать разницу стратегий, чтобы выбрать подходящую

	Примеры использования на практике:
	В навигаторе пути для разных пользователей могут строиться по разным алгоритмам (для пешеходов/автомобилистов и т.д.), со временем расширяется количество вариантов алгоритмов.
*/

// Coordinate описывает географическую координату.
type Coordinate struct {
	Latitude  float64
	Longitude float64
}

// RoutStrategy объявляет общий интерфейс.
type RoutStrategy interface {
	buildRoute(a, b Coordinate)
}

// AutomobileRoutStrategy - конкретная стратегия для определения пути для автомобилей.
type AutomobileRoutStrategy struct{}

func (s *AutomobileRoutStrategy) buildRoute(a, b Coordinate) {
	fmt.Println("Building route for automobiles")
}

// PedestrianRoutStrategy - конкретная стратегия для определения путей для пешеходов.
type PedestrianRoutStrategy struct{}

func (s *PedestrianRoutStrategy) buildRoute(a, b Coordinate) {
	fmt.Println("Building route for pedestrians")
}

// Navigator - контекст, настраиваемый конкретной стратегией.
type Navigator struct {
	strategy RoutStrategy
}

// SetStrategy - метод для смены стратегии.
func (n *Navigator) SetStrategy(newStrategy RoutStrategy) {
	n.strategy = newStrategy
}
